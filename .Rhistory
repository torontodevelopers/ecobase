k
?random
?seed
??seed
?sample
sample(1,1)
sample(1,1)
sample(2,1)
sample(3,1)
sample(3,1)
sample(3,1)
sample(3,1)
sample(1,2)
runif
runif()
?runif
k[1,4] <- runif(1, min=0, max=1)
k
k[1,4] <- round(runif(1, min=0, max=1))
k
for (i in 1:dim) {
for (j in 1:dim) {
k[i,j] <- round(runif(1, min=0, max=1))
}
}
k
get.adjacency(graph.edgelist(as.matrix(k), directed=FALSE))
a <- c("A", "B", "C", "D", "E")
n <- c("B", "D")
totalplayers <- union(a,n)
dim <- as.numeric(length(totalplayers))
k <- matrix(data = 0, nrow = dim, ncol = dim)
for (i in 1:dim) {
for (j in 1:dim) {
k[i,j] <- round(runif(1, min=0, max=1))
}
}
library(qgraph)
qgraph(k)
igraph(k)
qgraph(k)
diag(k) <- 0
k
qgraph(k)
k^2
k^3
k^4
k^5
k */* k
k % * % k
k %*% k
k %*% k
j <- k */* k
j <- k %*% k
j
k
j
k
j
k
k-j
j-k
k
j
k
j
?matrix
a <- c("A", "B", "C", "D")
n <- c("B", "E")
totalplayers <- union(a,n)
dim <- as.numeric(length(totalplayers))
k <- matrix(data = 0, nrow = dim, ncol = dim, dimnames = totalplayers)
k <- matrix(data = 0, nrow = dim, ncol = dim, dimnames = c(totalplayers))
k <- matrix(data = 0, nrow = dim, ncol = dim, dimnames = list(totalplayers))
k
for (i in 1:dim) {
for (j in 1:dim) {
k[i,j] <- round(runif(1, min=0, max=1))
}
}
diag(k) <- 0
j <- k %*% k
qgraph(k)
k
j
j-k
graph(k)
?graph
g2 <- graph( c(1,2,2,3,3,4,5,6), directed=FALSE )
g5 <- graph.star(10, mode="out")
g2
g5
g2 <- graph( c(1,2,2,3,3,4,5,6), directed=FALSE )
g2
graph(g2)
graph.adjacency(k)
plot(graph.adjacency(k))
plot(g2)
k
k <- matrix(data = 0, nrow = dim, ncol = dim)
library(igraph)
library(qgraph)
#read database
db <- dbConnect(SQLite(), dbname="movies.db")
sql <- "SELECT * FROM movies INNER JOIN revenues ON movies.id = revenues.movie_id ORDER BY movies.id, revenues.date ASC;"
data <- dbGetQuery(db, sql)
a <- c("A", "B", "C", "D")
n <- c("B", "E")
totalplayers <- union(a,n)
dim <- as.numeric(length(totalplayers))
k <- matrix(data = 0, nrow = dim, ncol = dim)
for (i in 1:dim) {
for (j in 1:dim) {
k[i,j] <- round(runif(1, min=0, max=1))
}
}
diag(k) <- 0
j <- k %*% k
qgraph(k)
?qgraph
??qgraph
?igraph
?get.adjedgelist
get.adjedgelist(k)
k
colSums(k)
rowSums(k)
graph(k)
qgraph(k)
colSums(k)
library(igraph)
library(qgraph)
# academy members (voters)
a <- c("A", "B", "C", "D")
# nominees
n <- c("B", "E")
#we union to find the graph of all combined
totalplayers <- union(a,n)
#create a random test adjacency matrix
dim <- as.numeric(length(totalplayers))
adj <- matrix(data = 0, nrow = dim, ncol = dim)
for (i in 1:dim) {
for (j in 1:dim) {
adj[i,j] <- round(runif(1, min=0, max=1))
}
}
# make sure there are no loops (for simplicity, eventually will let people vote for themselves)
diag(adj) <- 0
adj.deg2 <- adj %*% adj
adj.deg3 <- adj %*% adj %*% adj
adj.deg3
qgraph(adj)
qgraph(adj.deg2)
qgraph(adj)
get.adjacency(graph.edgelist(as.matrix(adj), directed=FALSE))
get.adjacency(graph.adjacency(adj), directed=FALSE))
get.adjacency(graph.adjacency(adj), directed=FALSE)
get.adjacency(graph.adjacency(adj, directed=FALSE))
adj
lower.tri(adj)
adj <- adj * lower.tri(adj)
adj
adj <- matrix(data = 0, nrow = dim, ncol = dim)
for (i in 1:dim) {
for (j in 1:dim) {
adj[i,j] <- round(runif(1, min=0, max=1))
}
}
adj
t(adj)
diag(adj) <- 0
top <- adj * upper.tri(adj)
top
t(top)
adj <- top + t(top)
adj
adj.deg2 <- adj %*% adj
adj.deg3 <- adj %*% adj %*% adj
qgraph(adj)
library(igraph)
library(qgraph)
# academy members (voters)
a <- c("A", "B", "C", "D")
# nominees
n <- c("B", "E")
#we union to find the graph of all combined
totalplayers <- union(a,n)
#create a random test adjacency matrix
dim <- as.numeric(length(totalplayers))
adj <- matrix(data = 0, nrow = dim, ncol = dim)
for (i in 1:dim) {
for (j in 1:dim) {
adj[i,j] <- round(runif(1, min=0, max=1))
}
}
# make sure there are no loops (for simplicity, eventually will let people vote for themselves)
diag(adj) <- 0
#make sure that the graph is undirected by making it symmetrical along the diagonal
top <- adj * upper.tri(adj)
adj <- top + t(top)
# create adjacency matrix that shows how many of path 2
adj.deg2 <- adj %*% adj
# create adjacency matrix that shows how many of path 3
adj.deg3 <- adj %*% adj %*% adj
qgraph(adj)
library(igraph)
library(qgraph)
# academy members (voters)
a <- c("A", "B", "C", "D")
# nominees
n <- c("B", "E")
#we union to find the graph of all combined
totalplayers <- union(a,n)
#create a random test adjacency matrix
dim <- as.numeric(length(totalplayers))
adj <- matrix(data = 0, nrow = dim, ncol = dim)
for (i in 1:dim) {
for (j in 1:dim) {
adj[i,j] <- round(runif(1, min=0, max=1))
}
}
# make sure there are no loops (for simplicity, eventually will let people vote for themselves)
diag(adj) <- 0
#make sure that the graph is undirected by making it symmetrical along the diagonal
top <- adj * upper.tri(adj)
adj <- top + t(top)
# create adjacency matrix that shows how many of path 2
adj.deg2 <- adj %*% adj
# create adjacency matrix that shows how many of path 3
adj.deg3 <- adj %*% adj %*% adj
qgraph(adj)
adj.deg2
adj.deg3
adj.deg1
adj
adj.deg2
diag(adj.deg2) <- 0
adj.deg2
diag(adj.deg3) <- 0
qgraph(adj)
rowsum(adj)
rowsums(adj)
Rowsums(adj)
rowSums(adj)
adj
outcome <- data.frame(c('vote by','vote for'))
View(outcome)
View(outcome)
outcome <- data.frame('vote by','vote for')
View(outcome)
for (i in 1:dim) {
for (j in 1:dim) {
outcome[i,j] <- 1
}
}
rowSums(adj)
colSums(adj)
colSums(adj) + .5 * colSums(adj.deg2)
colSums(adj) + .5 * colSums(adj.deg2) + .25 * colSums(adj.deg3)
?convolve()
?fft
?stepfun
?svd
library(survey)
install.packages('survey')
install.packages('signal')
??survey
hadamard(3)
library(survey)
hadamard(3)
hadamard(5)
hadamard(10)
library(signal)
??signal
library(igraph)
??igraph
rm(list=ls())
db <- dbConnect(SQLite(), dbname="movies.db")
# init
library(RSQLite)
library(sqldf)
library(lubridate)
library(ggplot2)
library(dplyr)
library(reshape2)
library(dtw)
library(rpud)
setwd('/Users/Rayy/dev/movie_hedge')
install.packages('swirl')
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
library(rapport)
library(pander)
<%=
demo(rapport, ask = F)
ls()
rm(list-ls())
rm(list=ls())
rapport.ls()
rapport.example
rapport.example('example')
rapport.example('Minimal',1)
rapport.info('Minimal')
rapport.html('example', ius2008, var = 'leisure')
install.packages('lme4')
install.packages('nortest')
library(markdown)
library(rmarkdown)
library(knitr)
?render
rapport("example", ius2008, var='leisure', desc=FALSE, histogram=T)
rdata(ius2008)
data(ius2008)
rapport("example", ius2008, var='leisure', desc=FALSE, histogram=T)
ius2008
rapport("example", ius2008, var='leisure', desc=FALSE, histogram=T)
View(ius2008)
rapport("example", ius2008, var='leisure', desc=T)
rapport("minimal", ius2008, var='leisure', desc=T)
rapport.html("minimal", ius2008, var='leisure', desc=T)
rapport.pdf("minimal", ius2008, var='leisure', desc=T)
install.packages('pandoc')
rapport.pdf("minimal", ius2008, var='leisure', desc=T)
rm(cars)
ls
ls()
install.packages('mapproj')
install.packages('ggmap')
install.pckages('DeducerSpatial')
install.packages('DeducerSpatial')
require(maps)
require(ggmap)
par(mfrow=c(2,1))
map('usa')
map("Canada")
map("canada")
?map
map('world')
map("world", "Canada")
?plot.new()
rm(list=ls())
map.cities(country= "Canada", capitals=1)
map("world", "Canada")
map.cities(country= "Canada", capitals=1)
rm(cars)
x <- c(0.18, -1.54, 0,42, 0.95)
w <- c(2,1,3,1)
x
(x-1.077)^2
sum((x-1.077)^2)
sum((x-0.3)^2)
sum((x-0..1471)^2)
sum((x-0.1471)^2)
sum((x-0.0025)^2)
for (i in 1:4) {
w[i]*(x[i]-mean(x))^2
}
rtotal <- 0
for (i in 1:4) {
sumofi <- w[i]*(x[i]-mean(x))^2
rtotal <- sumofi + rtotal
}
j <- 1.077
for (i in 1:4) {
sumofi <- w[i]*(x[i]-j)^2
rtotal <- sumofi + rtotal
}
rm(list=ls())
rtotal <- 0
j <- 1.077
for (i in 1:4) {
sumofi <- w[i]*(x[i]-j)^2
rtotal <- sumofi + rtotal
}
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
j <- 1.077
total <- 0
for (i in 1:4) {
sumofi <- w[i]*(x[i]-j)^2
rtotal <- sumofi + rtotal
}
j <- 0.3
total <- 0
for (i in 1:4) {
sumofi <- w[i]*(x[i]-j)^2
rtotal <- sumofi + rtotal
}
j <- 0.1471
total <- 0
for (i in 1:4) {
sumofi <- w[i]*(x[i]-j)^2
rtotal <- sumofi + rtotal
}
total <- 0
j <- 0.1471
rtotal <- 0
for (i in 1:4) {
sumofi <- w[i]*(x[i]-j)^2
rtotal <- sumofi + rtotal
}
j <- 0.3
rtotal <- 0
for (i in 1:4) {
sumofi <- w[i]*(x[i]-j)^2
rtotal <- sumofi + rtotal
}
j <- 1.077
rtotal <- 0
for (i in 1:4) {
sumofi <- w[i]*(x[i]-j)^2
rtotal <- sumofi + rtotal
}
j <- 0.0025
rtotal <- 0
for (i in 1:4) {
sumofi <- w[i]*(x[i]-j)^2
rtotal <- sumofi + rtotal
}
rm(list=ls())
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
rm(cars)
install.packages("mapproj")
install.packages('ggmap')
install.packages('DeducerSpatial')
require(maps)
require(ggmap)
?par
par(mfrow = c(2, 1))
map("usa")
par()
par(mfrow=1)
par(mfrow=1,1)
par(mfrow=c(1,1))
map("usa")
map('county')
map('world', 'china')
map('world', 'canada')
map.cities(country = 'canada', capitals = 2)
map.cities(country = 'china', capitals = 2)
map('world', 'china')
map.cities(country = 'China', capitals = 2)
map.cities(country = 'Canada', capitals = 2)
map('world', canada)
map('world', 'canada')
map.cities(country = 'Canada', capitals = 2)
map.cities(country = 'Canada', capitals = 1)
map('world', 'china')
map.cities(country = 'China', capitals = 2)
map('state', 'GEORGIA')
data(us.cities)
map.cities(us.cities, country = "GA")
data(unemp)
data(county.fips)
colors = c("#F1EEF6","#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")
head(unemp)
head(county.fips)
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
colorsmatched
map("county", col = colors[colorsmatched], fill = T, resolution= 0, lty = 0, projection= "polyconic")
canada.cities
maps(canada.cities)
?ggmaps
??ggmaps
?get_map
get_map()
x <- get_map(location = c(lon = 43.8354, lat = 79.0890))
ggmap(x)
??get_map
x <- get_map(location = c(lon = 43.8354, lat = 79.0890), urlonly=T)
x
x <- get_map(location = c(lon = 43.8354, lat = 79.0890), urlonly=T, source="osm")
x
x <- get_map(location = c(lon = 43.8354, lat = 79.0890), mPTYPE = c("hybrid"), urlonly=F, source="osm")
x <- get_map(location = c(lon = 43.8354, lat = 79.0890), maptype = c("hybrid"), urlonly=F, source="osm")
x <- get_map(location = c(lon = 43.8354, lat = 79.0890), urlonly=F, source="osm")
x <- get_map(location = c(lon = 43.8354, lat = 79.0890), urlonly=F, source="google")
map(x)
ggmap(x)
x <- get_map(location = c(lon = 43.8354, lat = -79.0890), urlonly=F, source="google")
ggmap(x)
x[1]
x[2]
x[3]
x[10000]
x[106000]
x[1][1]
x[1][2]
rm(list=ls())
rm(cars)
getwd()
setwd('/Users/msousa/Desktop/api/')
ls
dir()
setwd('/Users/msousa/Desktop/api/app/')
dir()
dir.create('MyCode')
dir.create(file.path('MyCode', 'R'))
library(devtools)
load_all('MyCode')
write.dcf(list(Package = 'MyCode', Title = 'My Code for this project', Description = 'To tackle this problem', version = '0.0', License = 'For my eyes only', Author = 'Barry Rowlingson <bsr@example.com>', Maintainer = 'Barry Rowlingson <bar@example.com>'), file = file.path('MyCode','DESCRIPTION'))
load_all('MyCode')
search()
build()
dir()
